// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"

type Movie = {
  adult: boolean;
  backdrop_path: string;
  genre_ids: number[];
  id: number;
  original_language: string;
  original_title: string;
  overview: string;
  popularity: number;
  poster_path: string;
  release_date: string; // Format: YYYY-MM-DD
  title: string;
  video: boolean;
  vote_average: number;
  vote_count: number;
};

type MoviesApiResponse = {
  statusCode: 200,
  page: number,
  total_pages: number,
  total_results: number,
  data: {
    results: Movie[]
    total: number
    skip: number
    limit: number
  }
}

// Define a service using a base URL and expected endpoints
export const quotesApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "http://backend:3000/movie" }),
  reducerPath: "moviesApi",
  tagTypes: ["Quotes"],

  endpoints: build => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getQuotes: build.query<MoviesApiResponse, number>({
      query: (limit = 10) => `?limit=${limit.toString()}`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (_result, _error, id) => [{ type: "Quotes", id }],
    }),
  }),
})

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetQuotesQuery } = quotesApiSlice
